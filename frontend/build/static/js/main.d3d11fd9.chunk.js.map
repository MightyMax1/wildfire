{"version":3,"sources":["components/LocationMarker.js","components/InfoBox.js","components/Map.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","InfoBox","data","id","title","Map","useState","width","window","innerWidth","height","innerHeight","latitude","longitude","zoom","viewport","setViewport","locationInfo","setLocationInfo","eventsMarker","map","eventData","categories","geometries","coordinates","onViewportChange","nextViewport","mapboxApiAccessToken","process","Header","App","setEventData","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAWeA,EARQ,SAAC,GAA0B,EAAxBC,IAAwB,EAAnBC,IAAoB,IAAfC,EAAc,EAAdA,QAChC,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAW,qBCQlCG,EAbC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACI,sBAAKJ,UAAU,WAAf,UACI,qDACA,+BACI,sCAASI,EAAKC,MACd,yCAAYD,EAAKE,gBC6ClBC,EA/CH,SAAC,GAAc,IAAZH,EAAW,EAAXA,KAAW,EACUI,mBAAS,CACrCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,SAAU,QACVC,WAAa,UACbC,KAAM,IANY,mBACfC,EADe,KACLC,EADK,OAQkBV,mBAAS,MAR3B,mBAQfW,EARe,KAQDC,EARC,KAUhBC,EAAejB,EAAKkB,KAAI,SAAAC,GAC1B,OAAmC,IAA/BA,EAAUC,WAAW,GAAGnB,GAChB,cAAC,IAAD,CACJS,SAAUS,EAAUE,WAAW,GAAGC,YAAY,GAC9CX,UAAWQ,EAAUE,WAAW,GAAGC,YAAY,GAF3C,SAOJ,cAAC,EAAD,CACI3B,QAAS,kBAAMqB,EAAgB,CAC3Bf,GAAIkB,EAAUlB,GACdC,MAAOiB,EAAUjB,aAMtB,QAKf,OACI,gCACI,cAAC,IAAD,2BACQW,GADR,IAEIU,iBAAkB,SAAAC,GAAY,OAAIV,EAAYU,IAC9CC,qBAAsBC,6FAH1B,SAKKT,KAEJF,GAAgB,cAAC,EAAD,CAASf,KAAMe,QCnC7BY,EARA,WACX,OACI,qBAAK/B,UAAU,SAAf,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,2C,MCmBG8B,MArBf,WAAgB,IAAD,EAEqBxB,mBAAS,IAF9B,mBAENe,EAFM,KAEKU,EAFL,KAab,OATAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEACAC,MAAM,mDADN,cACZC,EADY,gBAECA,EAAIC,OAFL,OAEZlC,EAFY,OAGlB6B,EAAa7B,EAAKmC,QAHA,2CAAH,qDAKjBC,KACC,IAGD,sBAAKxC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAKI,KAAMmB,QCTFkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d3d11fd9.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\r\n\r\nconst LocationMarker = ({ lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"location-marker\" onClick={onClick}>\r\n            <Icon icon={locationIcon} className={\"location-icon\"} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMarker\r\n","\r\nconst InfoBox = ({ data }) => {\r\n    return (\r\n        <div className=\"info-box\">\r\n            <h2>event location info</h2>\r\n            <ul>\r\n                <li>ID: {data.id}</li>\r\n                <li>title: {data.title}</li>\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import { useState } from 'react';\r\nimport ReactMapGL, { Marker } from 'react-map-gl';\r\nimport LocationMarker from './LocationMarker'\r\nimport InfoBox from './InfoBox'\r\n\r\nconst Map = ({ data }) => {\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        latitude: 38.29270,\r\n        longitude: - 103.377350,\r\n        zoom: 3\r\n    })\r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const eventsMarker = data.map(eventData => {\r\n        if (eventData.categories[0].id === 8) {\r\n            return (<Marker\r\n                latitude={eventData.geometries[0].coordinates[1]}\r\n                longitude={eventData.geometries[0].coordinates[0]}\r\n\r\n\r\n\r\n            >\r\n                <LocationMarker\r\n                    onClick={() => setLocationInfo({\r\n                        id: eventData.id,\r\n                        title: eventData.title\r\n                    })} />\r\n\r\n            </Marker>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ReactMapGL\r\n                {...viewport}\r\n                onViewportChange={nextViewport => setViewport(nextViewport)}\r\n                mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n            >\r\n                {eventsMarker}\r\n            </ReactMapGL>\r\n            {locationInfo && <InfoBox data={locationInfo} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1><Icon icon={locationIcon} /> wildfire tracker (powerd by nasa)</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\nimport Map from './components/Map'\nimport Header from './components/Header'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n\n  const [eventData, setEventData] = useState([])\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const data = await res.json()\n      setEventData(data.events)\n    }\n    fetchEvents()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Map data={eventData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}